Многопоточность.

Теоретическое введение, низкоуровневые примитивы:
-Потоки и процессы ОС
-Главная проблема - общее состояние
-synchronized и volatile, final, happens-before

Инструменты:
-ExecutorService
-Future, ScheduledFuture, CompletableFuture
-Многопоточные коллекции
-Атомики, LongAdder
-Локи (Lock, ReadWriteLock)
-CountDownLatch, Condition
-ThreadLocal

Задачи (2 из 3 обязательные):

1. Написать класс ContentDownloader, который в конструкторе принимает int poolSize и обладает единственным публичным методом public List<String> downloadContent(List<String> urls).
Скачивание в несколько потоков, предполагаем, что по url'ам доступны обычные html'ки, которые нужно вернуть в виде List'a String'ов.

2. Написать класс InMemoryCache<K, V> implements Cache<K, V> где
interface Cache<K, V> {
	void put(K key, V value);

	V get(K key, Function<K, V> getIfNotInCache);

	int size();

	void clear();
}
InMemoryCache в конструкторе должен принимать параметр int maxSize. Если InMemoryCache.size() == maxSize, то при добавлении элемента из кэша должна удаляться пара, которая дольше всего не использовалась (т.е. не помещалась через put или доставалась через get).

3. Написать программу, которая читает один файл построчно, проверяет каждую строчку на совпадение с заданной регуляркой и пишет во второй файл только те строчки, которые подпадают
под регулярку. Чтение в один поток, запись в один поток, проверка - в несколько потоков. Т.е. читающий поток читает блоками (по n строчек), отдает одному из проверяющих потоков,
а проверяющие потоки отдают подпадающие под проверку строчки записывающему потоку.
Параметры программы (всего 5): путь_до_файла_источника путь_до_файла_результата количество_проверяющих_потоков флаг_нужно_ли_сохранять_порядок_строчек регулярка
Позапускать с разными параметрами и на разных по объему файлах, проверить, дает ли многопоточность какой-то прирост.

Литература, полезные ссылки
-Обзор java.util.concurrent.* https://habr.com/company/luxoft/blog/157273/
-Java Concurrency in Practice
-А. Шипилев Прагматика Java Memory Model https://www.youtube.com/watch?v=iB2N8aqwtxc
-JLS, chapter 17.